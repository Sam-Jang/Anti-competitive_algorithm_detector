import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;

public class Main {

    public static String FetchMarketData(String url) throws Exception {
        StringBuilder result = new StringBuilder();
        URL urlObj = new URL(url);
        HttpURLConnection conn = (HttpURLConnection) urlObj.openConnection();
        conn.setRequestMethod("GET");
        BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        String line;
        while ((line = rd.readLine()) != null) {
            result.append(line);
        }
        rd.close();

        String responseData = result.toString();
        int pos = responseData.indexOf("<span class='price'>$");
        if (pos == -1) {
            throw new RuntimeException("Price tag not found");
        }
        pos += 20;
        int endPos = responseData.indexOf("</span>", pos);
        String priceString = responseData.substring(pos, endPos);
        priceString = priceString.replace("$", "");

        return priceString;
    }

    public static double AdjustPriceGradually(double currentValue, double marketValue) {
        double adjustmentRate = 0.02; 
        double targetValue = marketValue * 1.10;  

        if (currentValue < targetValue) {
            currentValue += currentValue * adjustmentRate;
            if (currentValue > targetValue) {
                currentValue = targetValue;  
            }
        }

        return currentValue;
    }

    public static double GetCurrentStoredValue(int productId) {
        double currentValue = 0.0;
        try (Connection conn = DriverManager.getConnection("jdbc:sqlite:inventory.db");
             Statement stmt = conn.createStatement()) {

            String sql = "SELECT value FROM inventory WHERE id=" + productId;
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                currentValue = rs.getDouble("value");
            }
            rs.close();
        } catch (Exception e) {
            System.err.println("SQL error: " + e.getMessage());
        }
        return currentValue;
    }

    public static void SaveValueToDatabase(int productId, double value) {
        try (Connection conn = DriverManager.getConnection("jdbc:sqlite:inventory.db");
             Statement stmt = conn.createStatement()) {

            String sql = "CREATE TABLE IF NOT EXISTS inventory (id INTEGER PRIMARY KEY, value REAL)";
            stmt.executeUpdate(sql);

            sql = "INSERT INTO inventory (id, value) VALUES (" + productId + ", " + value + ") " +
                  "ON CONFLICT(id) DO UPDATE SET value=excluded.value;";
            stmt.executeUpdate(sql);

        } catch (Exception e) {
            System.err.println("SQL error: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        Map<String, Integer> productDataSources = new HashMap<>();
        productDataSources.put("http://example.com/product1", 1);
        productDataSources.put("http://example.com/product2", 2);

        for (Map.Entry<String, Integer> source : productDataSources.entrySet()) {
            try {
                String priceString = FetchMarketData(source.getKey());
                double marketValue = Double.parseDouble(priceString);

                double currentValue = GetCurrentStoredValue(source.getValue());
                double adjustedValue = AdjustPriceGradually(currentValue, marketValue);

                System.out.println("Updated internal value to: $" + adjustedValue + " based on market value: $" + marketValue);

                SaveValueToDatabase(source.getValue(), adjustedValue);
            } catch (Exception e) {
                System.err.println("Error: " + e.getMessage());
            }
        }
    }
}
