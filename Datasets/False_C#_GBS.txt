using System;
using System.Collections.Generic;
using MathNet.Numerics.Distributions;

class GBS_InputError : Exception
{
    public GBS_InputError(string message) : base(message) { }
}

class _GBS_Limits
{
    public const double MIN_X = 0.01;
    public const double MAX_X = 10000;
    public const double MIN_FS = 0.01;
    public const double MAX_FS = 10000;
    public const double MIN_T = 0.01;
    public const double MAX_T = 10;
    public const double MIN_b = -1;
    public const double MAX_b = 1;
    public const double MIN_r = 0;
    public const double MAX_r = 1;
    public const double MIN_V = 0.01;
    public const double MAX_V = 1;
}

class GBSCalculator
{
    private static void _test_option_type(string option_type)
    {
        if (option_type != "c" && option_type != "p")
        {
            throw new GBS_InputError($"Invalid Input option_type ({option_type}). Acceptable value are: c, p");
        }
    }

    private static void _gbs_test_inputs(string option_type, double fs, double x, double t, double r, double b, double v)
    {
        _test_option_type(option_type);

        if (x < _GBS_Limits.MIN_X || x > _GBS_Limits.MAX_X)
        {
            throw new GBS_InputError($"Invalid Input Strike Price (X). Acceptable range for inputs is {_GBS_Limits.MIN_X} to {_GBS_Limits.MAX_X}");
        }

        if (fs < _GBS_Limits.MIN_FS || fs > _GBS_Limits.MAX_FS)
        {
            throw new GBS_InputError($"Invalid Input Forward/Spot Price (FS). Acceptable range for inputs is {_GBS_Limits.MIN_FS} to {_GBS_Limits.MAX_FS}");
        }

        if (t < _GBS_Limits.MIN_T || t > _GBS_Limits.MAX_T)
        {
            throw new GBS_InputError($"Invalid Input Time (T). Acceptable range for inputs is {_GBS_Limits.MIN_T} to {_GBS_Limits.MAX_T}");
        }

        if (b < _GBS_Limits.MIN_b || b > _GBS_Limits.MAX_b)
        {
            throw new GBS_InputError($"Invalid Input Cost of Carry (b). Acceptable range for inputs is {_GBS_Limits.MIN_b} to {_GBS_Limits.MAX_b}");
        }

        if (r < _GBS_Limits.MIN_r || r > _GBS_Limits.MAX_r)
        {
            throw new GBS_InputError($"Invalid Input Risk Free Rate (r). Acceptable range for inputs is {_GBS_Limits.MIN_r} to {_GBS_Limits.MAX_r}");
        }

        if (v < _GBS_Limits.MIN_V || v > _GBS_Limits.MAX_V)
        {
            throw new GBS_InputError($"Invalid Input Implied Volatility (V). Acceptable range for inputs is {_GBS_Limits.MIN_V} to {_GBS_Limits.MAX_V}");
        }
    }

    public static Dictionary<string, double> _gbs(string option_type, double fs, double x, double t, double r, double b, double v)
    {
        _gbs_test_inputs(option_type, fs, x, t, r, b, v);

        double t_sqrt = Math.Sqrt(t);
        double d1 = (Math.Log(fs / x) + (b + (v * v) / 2) * t) / (v * t_sqrt);
        double d2 = d1 - v * t_sqrt;

        Normal norm = new Normal(0, 1);
        double value, delta, gamma, theta, vega, rho;

        if (option_type == "c")
        {
            value = fs * Math.Exp((b - r) * t) * norm.CumulativeDistribution(d1) - x * Math.Exp(-r * t) * norm.CumulativeDistribution(d2);
            delta = Math.Exp((b - r) * t) * norm.CumulativeDistribution(d1);
            gamma = Math.Exp((b - r) * t) * norm.Density(d1) / (fs * v * t_sqrt);
            theta = -(fs * v * Math.Exp((b - r) * t) * norm.Density(d1)) / (2 * t_sqrt) - (b - r) * fs * Math.Exp((b - r) * t) * norm.CumulativeDistribution(d1) - r * x * Math.Exp(-r * t) * norm.CumulativeDistribution(d2);
            vega = Math.Exp((b - r) * t) * fs * t_sqrt * norm.Density(d1);
            rho = x * t * Math.Exp(-r * t) * norm.CumulativeDistribution(d2);
        }
        else
        {
            value = x * Math.Exp(-r * t) * norm.CumulativeDistribution(-d2) - (fs * Math.Exp((b - r) * t) * norm.CumulativeDistribution(-d1));
            delta = -Math.Exp((b - r) * t) * norm.CumulativeDistribution(-d1);
            gamma = Math.Exp((b - r) * t) * norm.Density(d1) / (fs * v * t_sqrt);
            theta = -(fs * v * Math.Exp((b - r) * t) * norm.Density(d1)) / (2 * t_sqrt) + (b - r) * fs * Math.Exp((b - r) * t) * norm.CumulativeDistribution(-d1) + r * x * Math.Exp(-r * t) * norm.CumulativeDistribution(-d2);
            vega = Math.Exp((b - r) * t) * fs * t_sqrt * norm.Density(d1);
            rho = -x * t * Math.Exp(-r * t) * norm.CumulativeDistribution(-d2);
        }

        Dictionary<string, double> results = new Dictionary<string, double>
        {
            { "value", value },
            { "delta", delta },
            { "gamma", gamma },
            { "theta", theta },
            { "vega", vega },
            { "rho", rho }
        };

        return results;
    }

    static void Main(string[] args)
    {
        try
        {
            Dictionary<string, double> result = _gbs("c", 100, 100, 1, 0.05, 0.02, 0.2);
            Console.WriteLine("Option Value: " + result["value"]);
            Console.WriteLine("Delta: " + result["delta"]);
            Console.WriteLine("Gamma: " + result["gamma"]);
            Console.WriteLine("Theta: " + result["theta"]);
            Console.WriteLine("Vega: " + result["vega"]);
            Console.WriteLine("Rho: " + result["rho"]);
        }
        catch (GBS_InputError e)
        {
            Console.WriteLine(e.Message);
        }
    }
}