using System;
using System.Threading;

class Tetris
{
    static int[,] grid = new int[20, 10];
    static int[,] tetromino;
    static int tetrominoRow = 0;
    static int tetrominoCol = 4;
    static Random random = new Random();

    static void Main()
    {
        Console.CursorVisible = false;
        SpawnTetromino();
        while (true)
        {
            if (Console.KeyAvailable)
            {
                ConsoleKeyInfo key = Console.ReadKey(true);
                if (key.Key == ConsoleKey.LeftArrow) MoveTetromino(-1, 0);
                else if (key.Key == ConsoleKey.RightArrow) MoveTetromino(1, 0);
                else if (key.Key == ConsoleKey.DownArrow) MoveTetromino(0, 1);
                else if (key.Key == ConsoleKey.Spacebar) RotateTetromino();
            }

            Thread.Sleep(500);
            MoveTetromino(0, 1);
            DrawGrid();
        }
    }

    static void SpawnTetromino()
    {
        tetromino = new int[,] {
            { 1, 1, 1, 1 }
        };
        tetrominoRow = 0;
        tetrominoCol = 3;
    }

    static void MoveTetromino(int dx, int dy)
    {
        int newRow = tetrominoRow + dy;
        int newCol = tetrominoCol + dx;
        if (IsValidMove(newRow, newCol))
        {
            tetrominoRow = newRow;
            tetrominoCol = newCol;
        }
        else if (dy == 1)
        {
            MergeTetromino();
            ClearFullRows();
            SpawnTetromino();
        }
    }

    static bool IsValidMove(int row, int col)
    {
        for (int r = 0; r < tetromino.GetLength(0); r++)
        {
            for (int c = 0; c < tetromino.GetLength(1); c++)
            {
                if (tetromino[r, c] == 1)
                {
                    int newRow = row + r;
                    int newCol = col + c;
                    if (newRow < 0 || newRow >= grid.GetLength(0) || newCol < 0 || newCol >= grid.GetLength(1) || grid[newRow, newCol] == 1)
                    {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    static void MergeTetromino()
    {
        for (int r = 0; r < tetromino.GetLength(0); r++)
        {
            for (int c = 0; c < tetromino.GetLength(1); c++)
            {
                if (tetromino[r, c] == 1)
                {
                    grid[tetrominoRow + r, tetrominoCol + c] = 1;
                }
            }
        }
    }

    static void ClearFullRows()
    {
        for (int r = 0; r < grid.GetLength(0); r++)
        {
            bool fullRow = true;
            for (int c = 0; c < grid.GetLength(1); c++)
            {
                if (grid[r, c] == 0)
                {
                    fullRow = false;
                    break;
                }
            }
            if (fullRow)
            {
                for (int row = r; row > 0; row--)
                {
                    for (int col = 0; col < grid.GetLength(1); col++)
                    {
                        grid[row, col] = grid[row - 1, col];
                    }
                }
                for (int col = 0; col < grid.GetLength(1); col++)
                {
                    grid[0, col] = 0;
                }
            }
        }
    }

    static void RotateTetromino()
    {
        int[,] rotated = new int[tetromino.GetLength(1), tetromino.GetLength(0)];
        for (int r = 0; r < tetromino.GetLength(0); r++)
        {
            for (int c = 0; c < tetromino.GetLength(1); c++)
            {
                rotated[c, tetromino.GetLength(0) - 1 - r] = tetromino[r, c];
            }
        }

        if (IsValidMove(tetrominoRow, tetrominoCol))
        {
            tetromino = rotated;
        }
    }

    static void DrawGrid()
    {
        Console.Clear();
        for (int r = 0; r < grid.GetLength(0); r++)
        {
            for (int c = 0; c < grid.GetLength(1); c++)
            {
                if (grid[r, c] == 1)
                {
                    Console.Write("#");
                }
                else
                {
                    bool isTetrominoPart = false;
                    for (int tr = 0; tr < tetromino.GetLength(0); tr++)
                    {
                        for (int tc = 0; tc < tetromino.GetLength(1); tc++)
                        {
                            if (tetromino[tr, tc] == 1 && tetrominoRow + tr == r && tetrominoCol + tc == c)
                            {
                                Console.Write("#");
                                isTetrominoPart = true;
                                break;
                            }
                        }
                    }
                    if (!isTetrominoPart) Console.Write(".");
                }
            }
            Console.WriteLine();
        }
    }
}