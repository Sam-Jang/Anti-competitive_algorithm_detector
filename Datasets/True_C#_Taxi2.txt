using MySql.Data.MySqlClient;
using System;
using System.Data;
using System.Linq;

class Program
{
    private static string connectionString = "Server=localhost;Database=database;User ID=root;Password=password;";

    static void Main()
    {
        var taxiData = FetchDataFromDb(userId);
        var matchedTaxis = taxiData
            .Select(row => new
            {
                TaxiId = row.TaxiId,
                MatchingScore = CalculateMatchingScore(
                    userLocation,
                    (row.LocationLat, row.LocationLon),
                    row.IsMember,
                    row.AverageRating,
                    row.Blocked)
            })
            .OrderByDescending(t => t.MatchingScore)
            .ToList();

        foreach (var taxi in matchedTaxis)
        {
            Console.WriteLine($"Taxi ID: {taxi.TaxiId}, Matching Score: {taxi.MatchingScore}");
        }
    }

    static DataTable FetchDataFromDb(int userId)
    {
        using (var conn = new MySqlConnection(connectionString))
        {
            conn.Open();
            var query = @"
                SELECT t.taxi_id AS TaxiId, t.location_lat AS LocationLat, t.location_lon AS LocationLon, 
                       t.is_member AS IsMember, t.average_rating AS AverageRating,
                       IFNULL(b.blocked, 0) AS Blocked
                FROM taxis t
                LEFT JOIN blocks b ON t.taxi_id = b.taxi_id AND b.user_id = @userId
            ";

            using (var cmd = new MySqlCommand(query, conn))
            {
                cmd.Parameters.AddWithValue("@userId", userId);
                using (var adapter = new MySqlDataAdapter(cmd))
                {
                    var dataTable = new DataTable();
                    adapter.Fill(dataTable);
                    return dataTable;
                }
            }
        }
    }

    static double CalculateMatchingScore((double, double) userLoc, (double, double) taxiLoc, bool isMember, double rating, bool isBlocked)
    {
        if (isBlocked)
            return double.NegativeInfinity;

        var distance = GeodesicDistance(userLoc, taxiLoc);
        var distanceWeight = Math.Max(0, 10 - distance) / 10;
        var memberWeight = isMember ? 1.2 : 1.0;
        var ratingWeight = rating / 5.0;

        return distanceWeight * memberWeight * ratingWeight;
    }

    static double GeodesicDistance((double lat1, double lon1) loc1, (double lat2, double lon2) loc2)
    {
        var dLat = (loc2.lat1 - loc1.lat1) * (Math.PI / 180);
        var dLon = (loc2.lon2 - loc1.lon1) * (Math.PI / 180);
        var a = Math.Pow(Math.Sin(dLat / 2), 2) +
                Math.Cos(loc1.lat1 * (Math.PI / 180)) * Math.Cos(loc2.lat2 * (Math.PI / 180)) *
                Math.Pow(Math.Sin(dLon / 2), 2);
        var c = 2 * Math.Asin(Math.Sqrt(a));
        var r = 6371;
        return c * r;
    }
}