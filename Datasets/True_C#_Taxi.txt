using System;
using System.Collections.Generic;
using System.Linq;

class Taxi {
    public string TaxiId { get; }
    public (double X, double Y) Location { get; }
    public bool Available { get; set; }
    public bool IsBlue { get; }
    public double DistanceToRequest { get; set; }

    public Taxi(string taxiId, double x, double y, bool isBlue = false) {
        TaxiId = taxiId;
        Location = (x, y);
        Available = true;
        IsBlue = isBlue;
        DistanceToRequest = double.MaxValue;
    }

    public int CompareTo(Taxi other) {
        if (IsBlue != other.IsBlue) {
            return IsBlue ? -1 : 1;
        }
        return DistanceToRequest.CompareTo(other.DistanceToRequest);
    }
}

class Request {
    public string RequestId { get; }
    public (double X, double Y) Location { get; }

    public Request(string requestId, double x, double y) {
        RequestId = requestId;
        Location = (x, y);
    }
}

class TaxiDispatchSystem {
    private List<Taxi> taxis = new List<Taxi>();
    private List<Request> requests = new List<Request>();

    public void AddTaxi(Taxi taxi) {
        taxis.Add(taxi);
        taxis = taxis.OrderBy(t => t).ToList();
    }

    public void AddRequest(Request request) {
        requests.Add(request);
        DispatchRequest(request);
    }

    private void DispatchRequest(Request request) {
        if (!taxis.Any()) {
            Console.WriteLine($"No taxis available for request {request.RequestId}");
            return;
        }

        var availableTaxis = taxis.Where(t => t.Available).ToList();

        if (!availableTaxis.Any()) {
            Console.WriteLine($"No available taxis for request {request.RequestId}");
            return;
        }

        foreach (var taxi in availableTaxis) {
            taxi.DistanceToRequest = CalculateDistance(taxi.Location, request.Location);
        }

        var sortedTaxis = availableTaxis.OrderBy(t => t).ToList();

        var closestTaxi = sortedTaxis.First();
        closestTaxi.Available = false;

        Console.WriteLine($"Request {request.RequestId} dispatched to Taxi {closestTaxi.TaxiId}");

        taxis.Remove(closestTaxi);
    }

    private double CalculateDistance((double X, double Y) loc1, (double X, double Y) loc2) {
        return Math.Sqrt(Math.Pow(loc1.X - loc2.X, 2) + Math.Pow(loc1.Y - loc2.Y, 2));
    }

    public static void Main() {
        var system = new TaxiDispatchSystem();

        system.AddTaxi(new Taxi("Taxi1", 1, 1));
        system.AddTaxi(new Taxi("Taxi2", 2, 2, true));
        system.AddTaxi(new Taxi("Taxi3", 3, 3));

        system.AddRequest(new Request("Request1", 1, 2));
        system.AddRequest(new Request("Request2", 2, 3));
        system.AddRequest(new Request("Request3", 0, 0));
    }
}